
/**
1. pointer strings can not be changed like const string 
2.declared strings can be changed

3. use pointer strings when:
    .making a constant string
    .passing strings to functions

4. use declared strings normally in the body of your functions

5. the = operator can be used only in initialization with declared strings

6.  as we know: "char *str" is the same as "char str[]"

7. multiple long string with "" and semicolon last 

**/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void hello(char * str) {
    str[0] = 'x';
    puts(str);
}
int main() {
    /// as we know: "char *str" is the same as "char str[]"
    char declaredStr[] = "hello";
    char *ptrStr;
    ptrStr = "hello";  // pointer can be addressed with pointer address
//  puts(ptrStr);
    char *other = "bye";

//    hello(other);
    printf("%s, %d\n", declaredStr, strlen(declaredStr));
    printf("%s, %d\n", ptrStr, strlen(ptrStr));
    
    
    //............................................................
    
    

//    declaredStr[1] = 'x';
///    ptrStr[1] = 'x' ; /// NOT ALLOWED !! -> USE pointer strings to make constant strings :)
//    puts(declaredStr);
//    puts(ptrStr);

///    declaredStr = other; /// NOT ALLOWED !!
//    ptrStr = other;
//    puts(ptrStr);

//    char *longStr1 ="1-Hello "
//                   "This String "
//                   "is declared "
//                   "on multiple lines!";
//
//    char longStr2[] ="2-Hello "
//                   "This String "
//                   "is declared "
//                   "on multiple lines!";
//    puts(longStr1);
//    puts(longStr2);

/**
- pointer strings can not be changed
- declared strings can be changed

- use pointer strings when:
    .making a constant string
    .passing strings to functions

- use declared strings normally in the body of your functions

- the = operator can be used only in initialization with declared strings
**/

    return 0;
}
